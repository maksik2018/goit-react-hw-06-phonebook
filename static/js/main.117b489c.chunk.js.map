{"version":3,"sources":["components/Container.styled.jsx","components/Container.jsx","redux/phonebook-actions.js","components/ContactForm.jsx","components/ContactList.styled.jsx","components/ContactList.jsx","components/Filter.jsx","App.js","redux/reducers/filter.js","redux/reducers/contacts.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["Div","styled","div","Container","children","addContact","createAction","data","payload","id","nextId","name","number","deleteContact","filterContact","connect","state","contacts","items","dispatch","onSubmit","useState","setName","setNumber","onChange","e","target","value","preventDefault","find","contact","toLowerCase","alert","placeholder","type","pattern","title","required","List","ul","Item","li","filterByName","filter","includes","onDeleteContact","map","onClick","App","filterReducer","createReducer","action","contactsReducer","phone","reducer","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","persistReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.117b489c.chunk.js","sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Div = styled.div`\r\n  margin-left: 30px;\r\n`;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Div } from '../components/Container.styled';\r\n\r\nexport default function Container({ children }) {\r\n  return <Div>{children}</Div>;\r\n }\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\n","// import { ADD_CONTACT, DELETE_CONTACT, FILTER_CONTACT } from \"./types\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\nimport nextId from \"react-id-generator\";\r\n\r\n// export const addContact = ({ name, number }) => ({\r\n//   type: ADD_CONTACT,\r\n//   payload: {\r\n//     id: nextId(),\r\n//     name,\r\n//     number,\r\n//   },\r\n// });\r\nexport const addContact = createAction(\"contacts/add\", (data) => ({\r\n  payload: {\r\n    id: nextId(),\r\n    name: data.name,\r\n    number: data.number,\r\n  },\r\n}));\r\n\r\n// export const deleteContact = (id) => ({\r\n//   type: DELETE_CONTACT,\r\n//   payload: id,\r\n// });\r\n\r\nexport const deleteContact = createAction(\"contacts/delete\");\r\n\r\n// export const filterContact = (value) => ({\r\n//   type: FILTER_CONTACT,\r\n//   payload: value,\r\n// });\r\n\r\nexport const filterContact = createAction(\"contacts/filter\");\r\n","import { React, useState } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from 'prop-types';\r\nimport { addContact } from '../redux/phonebook-actions';\r\n\r\n function ContactForm ({contacts, onSubmit}) {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  \r\n \r\n  const onChange = e => {\r\n       const { name, value } = e.target;\r\n\r\n    switch (name) {\r\n      case \"name\":\r\n        setName(value);\r\n        break;\r\n      case \"number\":\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    \r\n   \r\n     const checkOnContact = contacts.find(\r\n      (contact) => contact.name.toLowerCase() === name.toLowerCase()\r\n    );\r\n\r\n    if (checkOnContact) {\r\n      alert(`${name} is already in contacts`);\r\n      setName(\"\");\r\n      setNumber(\"\");\r\n      return;\r\n    }\r\n     if (name === \"\" && number === \"\") {\r\n      alert(\"Please fill empty fields\");\r\n      return;\r\n    }\r\n    onSubmit({ name, number });\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n    // else {\r\n    //   setContacts((prev) => [...prev, newContact]);\r\n    // }\r\n  };\r\n\r\n    \r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n         <input\r\n          placeholder=\"indicate your name\"\r\n          value={name}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={onChange}\r\n        />\r\n           <input\r\n          placeholder=\"indicate your phone number\"\r\n          value={number}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          onChange={onChange}\r\n        />\r\n        <button type='submit'>Add contact</button>\r\n      </form>\r\n    );\r\n  }\r\n\r\n  const mapStateToProps = (state) => ({\r\n  contacts: state.contacts.items,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onSubmit: (data) => dispatch(addContact(data)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n\r\nContactForm.propTypes = {\r\n    name: PropTypes.string,\r\n    number: PropTypes.string,\r\n    onSubmit: PropTypes.func.isRequired,\r\n};\r\n","import styled from '@emotion/styled';\r\n\r\nexport const List = styled.ul`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nexport const Item = styled.li`\r\n  margin-right: 40px;\r\n  list-style: none;\r\n`;\r\n","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { deleteContact } from \"../redux/phonebook-actions\";\r\nimport PropTypes from \"prop-types\";\r\nimport { List, Item} from \"../components/ContactList.styled\";\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => (\r\n// const ContactList = ({ contacts, filter, onDeleteContact }) => {\r\n//   const filtered = contacts.filter((contact) => contact.name.toLowerCase().trim().includes(filter.toLowerCase().trim()));\r\n//   return (\r\n    <List>\r\n      {contacts.map((contact) => (\r\n      // {filtered.map((contact) => (\r\n        <Item key={contact.id} >\r\n          <p>{contact.name}</p>\r\n          <p>{contact.number}</p>\r\n          <button type=\"button\" onClick={() => onDeleteContact(contact.id)}>Удалить</button>\r\n        </Item>\r\n      ))}\r\n    </List>\r\n  );\r\n// }\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string,\r\n    }).isRequired,\r\n  ).isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst filterByName = (state) => {\r\n  return state.contacts.items.filter((contact) =>\r\n    contact.name.toLowerCase().includes(state.contacts.filter.toLowerCase())\r\n     \r\n  );\r\n \r\n};\r\n  const mapStateToProps = (state) => ({\r\n  contacts: filterByName(state),\r\n});\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onDeleteContact: (id) => dispatch(deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { filterContact } from \"../redux/phonebook-actions\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n    <label>\r\n        Find contacts by name <input type=\"text\" value={value} onChange={onChange} />\r\n    </label>\r\n);\r\n\r\nconst mapStateToProps = (state) => ({\r\n  value: state.filter,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onChange: (e) => dispatch(filterContact(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string,\r\n    onChange: PropTypes.func.isRequired,\r\n};\r\n\r\n// export default Filter;","// import { React, useState, useEffect } from \"react\";\n// import nextId from \"react-id-generator\";\nimport Container from \"./components/Container\";\nimport ContactForm from \"./components/ContactForm\";\nimport ContactList from \"./components/ContactList\";\nimport Filter from \"./components/Filter\";\nimport \"./App.css\";\n\nexport default function App() {\n  // const [contacts, setContacts] = useState([\n  //   { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n  //   { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n  //   { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n  //   { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n  // ]);\n\n  // const [filter, setFilter] = useState(\"\");\n\n  // useEffect(() => {\n  //   const contacts = localStorage.getItem(\"contacts\");\n  //   const parsedContacts = JSON.parse(contacts);\n  //   // console.log(parsedContacts);\n  //   if (parsedContacts) {\n  //     setContacts(parsedContacts);\n  //   }\n  // }, []);\n\n  // useEffect(() => {\n  //   localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n  // }, [contacts]);\n\n  // const addContact = (data) => {\n  //   const { name, number } = data;\n  //   // const { contacts } = this.state;\n  //   const id = nextId();\n  //   const newContact = {\n  //     name,\n  //     id,\n  //     number,\n  //   };\n\n  //   const checkOnContact = contacts.find(\n  //     (contact) => contact.name.toLowerCase() === newContact.name.toLowerCase()\n  //   );\n\n  //   if (checkOnContact) {\n  //     alert(`${newContact.name} is already in contacts`);\n  //   } else {\n  //     setContacts((prev) => [...prev, newContact]);\n  //   }\n  // };\n\n  // const deleteContact = (contactId) => {\n  //   setContacts((prev) => prev.filter((contact) => contactId !== contact.id));\n  // };\n\n  // const onFilterChange = (event) => {\n  //   const targetValue = event.target.value;\n  //   setFilter(targetValue);\n  // };\n\n  // const filterByName = () => {\n  //   return contacts.filter((contact) =>\n  //     contact.name.toLowerCase().includes(filter.toLowerCase())\n  //   );\n  // };\n\n  return (\n    <Container>\n      <h1> Phonebook </h1>\n      <h2>Add new contact</h2>\n      {/* <ContactForm onSubmit={addContact} /> */}\n      <ContactForm />\n      <h2>Find contact</h2>\n      <Filter />\n      {/* <Filter value={filter} onChange={onFilterChange} /> */}\n      <h2>Contact list</h2>\n      {/* <ContactList contacts={filterByName()} onDeleteContact={deleteContact} /> */}\n      <ContactList />\n    </Container>\n  );\n}\n\n// import ContactForm from \"./Components/ContactForm/ContactForm\";\n// import ContactList from \"./Components/ContactList/ContactList\";\n// import Filter from \"./Components/Filter/Filter\";\n// import Container from \"./Components/Utils/Container/Container\";\n// import Title from \"./Components/Utils/Title/Title\";\n\n// function App() {\n//   // useEffect(() => {\n//   //   const contacts = localStorage.getItem(\"contacts\");\n//   //   const parsedContacts = JSON.parse(contacts);\n\n//   //   if (parsedContacts) {\n//   //     setContacts(parsedContacts);\n//   //   }\n//   // }, []);\n\n//   // useEffect(() => {\n//   //   localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n//   //   if (contacts.length === 0) {\n//   //     localStorage.removeItem(\"contacts\");\n//   //   }\n//   // }, [contacts]);\n\n//   return (\n//     <Container>\n//       <Title color=\"#424242\" size={30} text=\"Phonebook\" />\n//       <div\n//         style={{\n//           border: \"1px solid gray\",\n//           width: \"fit-content\",\n//           padding: \"20px\",\n//         }}\n//       >\n//         <ContactForm />\n//       </div>\n//       <Filter />\n//       <Title marginT={40} size={20} text=\"Contacts\" />\n//       <ContactList />\n//     </Container>\n//   );\n// }\n\n// export default App;\n","// import { FILTER_CONTACT } from \"../types\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport { filterContact } from \"../phonebook-actions\";\r\n\r\n// const filterReducer = (state = \"\", action) => {\r\n//   switch (action.type) {\r\n//     case FILTER_CONTACT:\r\n//       return action.payload;\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nconst filterReducer = createReducer(\"\", {\r\n  [filterContact]: (state, action) => action.payload,\r\n});\r\n\r\nexport default filterReducer;\r\n","// import { ADD_CONTACT, DELETE_CONTACT } from \"../types\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport { addContact, deleteContact } from \"../phonebook-actions\";\r\n\r\nconst initialContactsState = [\r\n  { id: \"id-1\", name: \"John Piters\", phone: \"555-55-55\" },\r\n  { id: \"id-2\", name: \"Piter Johnson\", phone: \"444-44-44\" },\r\n  { id: \"id-3\", name: \"Pit Ivans\", phone: \"333-33-33\" },\r\n  { id: \"id-4\", name: \"Ivan Piterson\", phone: \"222-22-22\" },\r\n];\r\n\r\n// const contactsReducer = (state = initialContactsState, action) => {\r\n//   switch (action.type) {\r\n//     case ADD_CONTACT:\r\n//       return [...state, action.payload];\r\n//     case DELETE_CONTACT:\r\n//       return state.filter((contact) => action.payload !== contact.id);\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\nconst contactsReducer = createReducer(initialContactsState, {\r\n  [addContact]: (state, action) => [...state, action.payload],\r\n  [deleteContact]: (state, action) =>\r\n    state.filter((contact) => action.payload !== contact.id),\r\n});\r\nexport default contactsReducer;\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport filterReducer from \"./filter\";\r\nimport contactsReducer from \"./contacts\";\r\n\r\nexport const reducer = combineReducers({\r\n  items: contactsReducer,\r\n  filter: filterReducer,\r\n});\r\n","// import { createStore } from \"redux\";\r\n// import { devToolsEnhancer } from \"redux-devtools-extension\";\r\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport logger from \"redux-logger\";\r\nimport { reducer } from \"./reducers\";\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst contactsPersistConfig = {\r\n  key: \"contacts\",\r\n  storage,\r\n  blacklist: [\"filter\"],\r\n};\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, reducer),\r\n  },\r\n  middleware,\r\n\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { persistor, store } from \"./redux/store\";\n// import { store } from \"./redux/store\";\n\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}